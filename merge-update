#!/bin/bash



WD=$(pwd)
OUT=${ANDROID_PRODUCT_OUT}
UPDATE=${UPDATE:="/home/jon/update/"}

echo WD=${WD}
echo OUT=${OUT}
echo UPDATE=${UPDATE}
echo -----------------------

clean(){
    cd ${OUT}
    cat merged_files | xargs rm -r
    rm merged_files
}
wipe(){
    cd ${OUT}
    rm -r data/ META-INF/ recovery/ root/ squash_backup/ system/
    rm *.img
    clean
    rebuild
}
rebuild(){
    cd ${OUT}
    find . -name "system.img" -print0 | xargs -0 rm 2> /dev/null
    echo "system.img can now be rebuilt"
}
backup_folder(){
    echo "backing up $1"
    mkdir -p ${OUT}/squash_backup/
    rm -r "${OUT}/squash_backup/$1"
    cp -r $1 ${OUT}/squash_backup/
}
squash_folder(){
    if [ -d "$1" ]
    then
        backup_folder $1
        echo "squashing $1"
        mksquashfs $1 $1.sqf -noappend
        rm -r $1/
        mkdir $1/
        mv $1.sqf $1/
    else
        echo "can't squash $1"
    fi
}
unsquash_folder(){
    cd ${OUT}/system
    rm -r $1
    cp -r "${OUT}/squash_backup/$1" .
}
squash(){
    WD=$(pwd)
    cd ${OUT}/system
    squash_folder xbin
    squash_folder modules
    cd ${WD}
}
unsquash(){
    cd ${OUT}
    unsquash_folder xbin
    unsquash_folder modules
#    rm -r squash_backup
}
diff_update(){
    cd ${OUT}
    OUT_SYSTEM="$(find {system,data,META-INF/com} | sort)"

    cd ${UPDATE}
    UPDATE_SYSTEM="$(find {system,data,META-INF/com} | sort)"

    diff <(echo "${OUT_SYSTEM}") <(echo "${UPDATE_SYSTEM}") | grep "^>" | awk -F ">" '{print $2}' | sed 's/^[[:space:]]*//'
}
diff_update2(){
    cd ${OUT}
    OUT_SYSTEM="$(find {system,data,META-INF/com} -type f | sort)"

    cd ${UPDATE}
    UPDATE_SYSTEM="$(find {system,data,META-INF/com} -type f | sort)"

    diff <(echo "${OUT_SYSTEM}") <(echo "${UPDATE_SYSTEM}") | grep "^<" | awk -F "<" '{print $2}' | sed 's/^[[:space:]]*//'
}
diff_update_size(){
    cd ${OUT}/system
    OUT_SYSTEM="$(find . -type f -printf '%P %s\n' | grep ".apk" | sort -u | egrep -v "^(xbin|modules|framework)" | column -t)"

    cd ${UPDATE}/system
    UPDATE_SYSTEM="$(find . -type f -printf '%P %s\n' | grep ".apk" | sort -u | egrep -v "^(xbin|modules|framework)" | column -t)"

    diff -U 1 <(echo "${OUT_SYSTEM}") <(echo "${UPDATE_SYSTEM}") | egrep "^(\+|-)" | tail -n +3 | egrep "^\+" | awk -F "[+[:space:]]" '{print $2}'
}
merge_smaller_files(){
    MERGE_FILES="$(diff_update_size)"
    cd ${UPDATE}
    for i in ${MERGE_FILES}; do
        i=system/$i
        ERROR=$(acp -ftpdv "$i" "${OUT}/$i" 2>&1)
        case "${ERROR}" in
            *omitting*)
                echo "Making '$i'"
                mkdir -p "${OUT}/$i"
                ;;
            *--*)
                echo "${ERROR}"
                ;;
            *)
                echo "Unknown error: ${ERROR}"
                ;;
        esac
    done
}
prune(){
    cd ${OUT}
    diff_update2 | xargs rm
}
case "$1" in
    clean)
        if [ "$2" == "all" ]
        then
            wipe
        else
            clean
            rebuild
        fi
        ;;
    debug)
        cd ${OUT}
        OUT_SYSTEM="$(find {system,data,META-INF/com} | sort)"

        cd ${UPDATE}
        UPDATE_SYSTEM="$(find {system,data,META-INF/com} | sort)"

        diff <(echo "${OUT_SYSTEM}") <(echo "${UPDATE_SYSTEM}") | grep "^>" | awk -F ">" '{print $2}' | sed 's/^[[:space:]]*//'
        ;;
    sizediff)
        diff_update_size
        ;;
    prune)
        prune
        ;;
    merge)
        merge_smaller_files
        ;;
    rebuild)
        rebuild
        ;;
    cleansquash)
        cleansquash
        ;;
    unsquash)
        unsquash
        ;;
    squash)
        squash
        ;;
    system)
        cd ${OUT}
        echo "making system.img"
        mkyaffs2image -f `pwd`/system system.img
        echo "making userdata.img"
        mkyaffs2image -f `pwd`/data userdata.img
        ;;
    *)
        cd ${OUT}
        if [ -f "merged_files" ]; then
            echo "Looks like an update was already merged. Run '$0 clean' to clean the merge"
            exit 1
        fi
        #do not include quashed files
        diff_update | awk '$0 ~ "^.*[.]sqf$" {next} {print}' > ${OUT}/merged_files
        cd ${UPDATE}
        for i in $(cat ${OUT}/merged_files); do
            ERROR=$(acp -ftpdv "$i" "${OUT}/$i" 2>&1)
            case "${ERROR}" in
                *omitting*)
                    echo "Making '$i'"
                    mkdir -p "${OUT}/$i"
                    ;;
                *--*)
                    ;;
                *)
                    echo "Unknown error: ${ERROR}"
                    ;;
            esac
        done
        rebuild
        ;;
esac
